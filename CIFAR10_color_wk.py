# -*- coding: utf-8 -*-
"""CIFAR10_color.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14OM7lNt0_ehTtZAFkNXgNfNiZvW3ZVMU
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.utils.data import DataLoader, random_split
from tqdm import tqdm

import time

'''
for i in tqdm(range(10)):
    time.sleep(1)
    print(i)

with tqdm(total=10, desc="Train") as pbar:
    for i in range(10):
        time.sleep(1)
        pbar.update(1)
'''
# train 데이터는 데이터 증식을 해도 되지만, test 데이터는 데이터 증식을 하면 안됨

# def dataAug():
    # 데이터 증강 및 정규화를 위한 변환 설정

import torch
import torch.nn as nn
import torch.nn.functional as F

# 입력 이미지 (3,32,32) -> (color, height, width)
# 출력 label -> 0~9

classes = 10

class CIFAR10Net(nn.Module):
    def __init__(self):
        super(CIFAR10Net, self).__init__()
        # 합성곱 레이어 1
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)  # 입력 채널: 3, 출력 채널: 32
        self.bn1 = nn.BatchNorm2d(32)  # 배치 정규화

        # 합성곱 레이어 2
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1) # 입력 채널: 32, 출력 채널: 64
        self.bn2 = nn.BatchNorm2d(64)

        # 합성곱 레이어 3
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1) # 입력 채널: 64, 출력 채널: 128
        self.bn3 = nn.BatchNorm2d(128)

        # 완전 연결 레이어
        self.fc1 = nn.Linear(128 * 4 * 4, 512)  # 128 채널의 4x4 특성 맵을 512 유닛으로 변환
        self.fc2 = nn.Linear(512, classes)  # 512 유닛을 10개의 클래스로 변환

    def forward(self, x):
        # 합성곱 레이어 1
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.relu(x)
        x = F.max_pool2d(x, kernel_size=2, stride=2)  # 맥스 풀링

        # 합성곱 레이어 2
        x = self.conv2(x)
        x = self.bn2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, kernel_size=2, stride=2)  # 맥스 풀링

        # 합성곱 레이어 3
        x = self.conv3(x)
        x = self.bn3(x)
        x = F.relu(x)
        x = F.max_pool2d(x, kernel_size=2, stride=2)  # 맥스 풀링

        # 완전 연결 레이어
        x = x.view(-1, 128 * 4 * 4)  # 텐서를 1차원으로 펼치기
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

def main():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    lr = 0.001
    epochs = 50

    model = CIFAR10Net().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)

    train_losses = []
    valid_losses = []
    train_accuracies = []
    valid_accuracies = []

    print("\033[34mtrain\033[0m")

    '''
    def train(model, train_loader, criterion, optimizer, epochs):
        # 훈련 모드 설정
        model.train()

        train_loss = 0
        train_correct = 0
        train_total = 0

    epoch = 0
    startStr = f'Epoch {epoch+1:2d}/{epochs} \033[34m'+'Train'+'\033[0m'
    with tqdm()
    '''

    def train(model, train_loader, criterion, optimizer, epoch):
        # 훈련 모드 설정
        model.train()

        train_loss=0
        train_correct=0
        train_total=0

        startStr =f'Epoch {epoch+1:2d}/{epochs} \033[34m' + 'Train'+ '\033[0m'
        with tqdm(total=len(train_loader), desc=startStr) as pbar:
            for images, labels in train_loader:
                images, labels = images.to(device), labels.to(device)

                optimizer.zero_grad()
                outputs = model(images)
                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()

                train_loss += loss.item()
                _, predicted = torch.max(outputs.data, 1)

                train_total += labels.size(0)
                train_correct += (predicted == labels).sum().item()
                pbar.update(1)
            train_loss = train_loss / train_total
            train_accuracy = (train_correct / train_total)*100
            train_losses.append(train_loss)
            train_accuracies.append(train_accuracy)
            endStr = f'Train Loss: {train_loss:.4f}, Train Acc: {train_accuracy:.4f}%'
            # tqdm동작이 다 끝나면 그때 아래의 코드가 동작
            print(endStr)
            #pbar.set_postfix(endStr)

    def valid_or_test(mode, model, device, dataloader, num_epochs):
        model.eval()
        loss = 0.0
        correct = 0
        total = 0
        with torch.no_grad():
            if mode == 'valid':
                startStr = f'Epoch {epoch+1:2d}/{num_epochs} \033[34m' + 'Valid ' + '\033[0m'
            elif mode == 'test':
                startStr = f'Epoch {epoch+1:2d}/{num_epochs} \033[34m' + 'Test ' + '\033[0m'

            with tqdm(total=len(dataloader), desc=startStr) as pbar:
                for data, target in dataloader:
                    data, target = data.to(device), target.to(device)
                    outputs = model(data)
                    loss = criterion(outputs, target)

                    loss += loss.item() * data.size(0)
                    _, predicted = torch.max(outputs, 1)
                    total += target.size(0)
                    correct += (predicted == target).sum().item()
                    pbar.update(1)

                loss = loss / total
                accuracy = 100 * correct / total
                if mode == 'valid':
                    endStr = f'Valid Loss: {loss:.4f}, Valid Acc: {accuracy:.3f}%'
                elif mode == 'test':
                    endStr = f'Test Loss: {loss:.4f}, Test Acc: {accuracy:.3f}%'
                pbar.set_postfix_str(endStr)

        if mode == 'valid':
            valid_losses.append(loss)
            valid_accuracies.append(accuracy)
            print('-'*110)

    for epoch in range(epochs):
        train(model, train_loader, criterion, optimizer, epoch)
        valid_or_test('valid', model, device, valid_loader, epoch)

    valid_or_test('test', model, device, test_loader, test_loader)


if __name__ == '__main__':
    # device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    
    transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),  # 데이터 증강: 랜덤하게 잘라내기
    transforms.RandomHorizontalFlip(),      # 데이터 증강: 랜덤하게 좌우 반전
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),  # 정규화
    ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])

    # CIFAR10 데이터셋 불러오기
    train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
    test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)

    train_ratio = 0.8

    train_size = int(len(train_dataset)*train_ratio)
    val_size = len(train_dataset) - train_size
    train_dataset, val_dataset = random_split(train_dataset, [train_size, val_size])


    # 데이터 로더 생성
    batch_size = 128  # 원하는 배치 크기 설정
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2)  # num_workers : cpu 개수
    valid_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=2)

    main()
    